{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","classes","webcamRef","React","useRef","useState","imgSrc","setImgSrc","userChoice","setUserChoice","computerChoice","setComputerChoice","result","setResult","choices","generateComputerChoice","randomChoice","Math","floor","random","length","useEffect","capture","useCallback","imageSrc","current","getScreenshot","model","setModel","a","tf","process","console","log","pred","preprocess","document","getElementById","prediciton","predict","dataSync","getResults","imgData","tensor","fromPixels","resize","resizeBilinear","toFloat","offset","sub","div","expandDims","prediction","indexOf","max","data","title","value","toFixed","innerHTML","then","loadModel","style","position","top","left","id","audio","ref","screenshotQuality","screenshotFormat","padding","onClick","event","getFrame","src","width","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3f8d28e0.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Webcam from \"react-webcam\";\n\n//const WebcamComponent = () => <Webcam />;\n\nfunction App() {\n  const classes = [\"rock\", \"paper\", \"scissors\"];\n  const webcamRef = React.useRef(null);\n  const [imgSrc, setImgSrc] = React.useState(null);\n\n  const [userChoice, setUserChoice] = useState(null);\n  const [computerChoice, setComputerChoice] = useState(null);\n  const [result, setResult] = useState(null);\n  const choices = [\"rock\", \"paper\", \"scissors\"];\n\n  const handleClick = (value) => {\n    setUserChoice(value);\n    generateComputerChoice();\n  };\n\n  const generateComputerChoice = () => {\n    const randomChoice = choices[Math.floor(Math.random() * choices.length)];\n    setComputerChoice(randomChoice);\n  };\n\n  useEffect(() => {\n    {\n      switch (userChoice + computerChoice) {\n        case \"scissorspaper\":\n        case \"rockscissors\":\n        case \"paperrock\":\n          setResult(\"YOU WIN!\");\n          break;\n        case \"paperscissors\":\n        case \"scissorsrock\":\n        case \"rockpaper\":\n          setResult(\"YOU LOSE!\");\n          break;\n        case \"rockrock\":\n        case \"paperpaper\":\n        case \"scissorsscissors\":\n          setResult(\"ITS A DRAW!\");\n          break;\n      }\n    }\n  }, [computerChoice, userChoice]);\n\n  const capture = React.useCallback(() => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setImgSrc(imageSrc);\n  }, [webcamRef, setImgSrc]);\n\n  const [model, setModel] = useState();\n\n  async function loadModel() {\n    try {\n      const model = await tf.loadLayersModel(\n        process.env.PUBLIC_URL + \"/model/model.json\"\n      );\n      setModel(model);\n      console.log(\"successfully loaded model...\");\n    } catch (err) {\n      console.log(err);\n      console.log(\"failed loading model...\");\n    }\n  }\n  useEffect(() => {\n    tf.ready().then(() => {\n      loadModel();\n    });\n  }, []);\n\n  async function getFrame() {\n    const pred = preprocess(document.getElementById(\"img\"));\n\n    const prediciton = model.predict(pred).dataSync();\n\n    return getResults(prediciton);\n  }\n  function preprocess(imgData) {\n    return tf.tidy(() => {\n      //convert to a tensor\n\n      let tensor = tf.browser.fromPixels(imgData, 3);\n      //resize\n      //console.log(tensor);\n\n      const resize = tf.image.resizeBilinear(tensor, [150, 150]).toFloat();\n      // // //normalize\n      // console.log(resize);\n      const offset = tf.scalar(255.0);\n      // console.log(offset);\n      const normalized = tf.scalar(1.0).sub(resize.div(offset));\n      // console.log(normalized);\n      //\n      // //We add a dimension to get a batch shape\n      return normalized.expandDims(0);\n    });\n  }\n\n  function getResults(prediction) {\n    let result = prediction.indexOf(Math.max(...prediction));\n\n    let data = [\n      {\n        title: \"Rock\",\n        value: prediction[0].toFixed(2) * 100,\n      },\n      {\n        title: \"Paper\",\n        value: prediction[1].toFixed(2) * 100,\n      },\n      {\n        title: \"Scissor\",\n        value: prediction[2].toFixed(2) * 100,\n      },\n    ];\n\n    console.log(\n      classes[result] + \": \" + prediction[result].toFixed(2) * 100 + \"%\"\n    );\n\n    let content = document.getElementById(\"prediction\");\n    content.innerHTML =\n      data[0].title +\n      \": \" +\n      data[0].value +\n      \"% \" +\n      data[1].title +\n      \": \" +\n      data[1].value +\n      \"% \" +\n      data[2].title +\n      \": \" +\n      data[2].value +\n      \"%\";\n\n    console.log(result);\n    handleClick(choices[result]);\n    return data;\n  }\n\n  return (\n    <>\n      <div style={{ position: \"absolute\", top: \"200px\", left: \"30px\" }}>\n        <Webcam\n          id=\"img\"\n          audio={false}\n          ref={webcamRef}\n          screenshotQuality={0.1}\n          screenshotFormat=\"image/jpeg\"\n        />\n      </div>\n      <button\n        style={{\n          position: \"absolute\",\n          top: \"380px\",\n          padding: \"50px 38px\",\n          \"border-radius\": \"8px\",\n          left: \"700px\",\n          \"font-size\": \"40px\",\n        }}\n        onClick={function (event) {\n          capture();\n          getFrame();\n          //handleClick(choice);\n        }}\n      >\n        Predict\n      </button>\n      <div>\n        {imgSrc && (\n          <img\n            id=\"myImage\"\n            src={imgSrc}\n            style={{\n              position: \"absolute\",\n              width: \"200px\",\n              top: \"200px\",\n              left: \"700px\",\n            }}\n          />\n        )}\n      </div>\n\n      <div\n        style={{ position: \"absolute\", top: \"210px\", left: \"40px\" }}\n        id=\"prediction\"\n      ></div>\n\n      <div style={{ position: \"absolute\", top: \"25px\", left: \"30px\" }}>\n        <div>\n          <h1>Your choice is: {userChoice}</h1>\n          <h1>Computer choice is: {computerChoice}</h1>\n\n          <h1\n            style={{\n              position: \"absolute\",\n              top: \"-10px\",\n              left: \"480px\",\n              width: \"520px\",\n              color: \"rgb(255,153,82)\",\n              \"font-size\": \"60px\",\n            }}\n          >\n            {result}\n          </h1>\n        </div>\n      </div>\n    </>\n\n    //<WebcamCapture/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}